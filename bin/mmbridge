#!/usr/bin/env rakudo

=begin pod

This is the bridge script for mixmaster. It transforms build requests
into job files that are written to C</var/spool/mixmaster/USER>.

Build requests arrive on stdin as HTTP requests from a systemd socket
service. JSON is the primary content type for these requests, but
multiple formats are supported:

=item A comprehensive format used by Gitea
=item A lightweight format specific to mixmaster
=item A minimal format for command execution

Each format is accepted from a discrete URL path, but all such paths
are accounted for this script.

This script reads the user-specific mixmaster configuration file in
C<~/.config/mixmaster.ini> to figure out whether a request pertains to
a known project.

=end pod

use lib '/usr/local/share/mixmaster/lib';
use lib $*PROGRAM.absolute.IO.parent(2).add('lib');

use HttpResponse;
use Job;
use Config;

our Str constant SCRIPT_VERSION = "2021.09.29";

multi MAIN(Bool :$man) {
    run $*EXECUTABLE, '--doc', $*PROGRAM;
}

multi MAIN(Bool :$version) {
    say SCRIPT_VERSION;
    exit;
}

multi sub MAIN() {
    my Str %headers{Str};

    for lines() {
        unless %headers<method>:exists {
            my (Str $method, Str $uri, Str $version) = $_.split(' ', 3);
            %headers.append('method', $method);
            %headers.append('uri', $uri);
            %headers.append('version', $version);
        }

        if ($_.contains(':')) {
            my (Str $key, Str $value) = $_.split(':', 2);
            %headers{$key.lc.trim} = val($value);
        }

        unless ($_.trim) {
            last;
        }
    }

    given %headers<method>.uc {
        when "POST" or "PUT" {
            unless has-config() {
                send-error-response("Configuration file not found.");
                exit;
            }

            my Buf $body = $*IN.read(%headers<content-length>);
            accept-job($body, %headers<uri>);
        }

        when "GET" {
            given %headers<uri>  {
                when "/version" {
                    send-success-response(SCRIPT_VERSION);
                    exit;
                }

                default {
                    send-notfound-response();
                    exit;
                }
            }
        }

        default {
            send-notallowed-response();
            exit;
        }
    }
}

# Local Variables:
# mode: raku
# End:
