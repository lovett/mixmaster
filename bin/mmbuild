#!/usr/bin/env rakudo

=begin pod

This is the build script for mixmaster, responsible for picking up
jobs that have been spooled by C<mmbridge> and executing the
designated build command.

This script is normally invoked by a systemd path service that watches
for changes to the spool directory. After a build has finished, it
will pick up the next one until the spool directory is empty.

=end pod

use lib '/usr/local/share/mixmaster/lib';
use lib 'lib';

use Config::INI;

our Str constant SCRIPT_VERSION = "2020.02.03";

our IO::Path constant CONFIG = $*HOME.add(".config/mixmaster.ini");

my IO::Handle $logHandle;

enum JobState <job-start job-end job-fail>;

signal(SIGTERM).tap: {
    log-to-file('X', 'Killed by SIGTERM');
    try close $logHandle;
    exit;
}

sub decode-ini-value(Str $message) {
    my $result = $message;
    $result ~~ s:g/\\\\newline/\n/;
    $result ~~ s:g/\\\\leftbracket/[/;
    $result ~~ s:g/\\\\rightbracket/]/;
    return $result;

}

# Write a message to a job-specific log file.
sub log-to-file(Str $prefix, Str $message) {
    try $logHandle.say("{DateTime.now.hh-mm-ss} {$prefix} $_")
    for $message.split("\n");
    try $logHandle.flush();
}

# Dispatcher for tracking job progress in local logs and external proceesses.
sub broadcast(JobState $state, %job, Str $message?) {
    given $state {
        when job-start {
            log-to-file('#', "Build started in {%job<workspace>}");
            log-to-file('#', "Logging to {%job<path>}");

            if (%job<mailto>) {
                use Broadcast::Email;
                mail-job-start(%job<mailto>, %job);
            }
        }

        when job-end {
            my $success = 'Build finished';
            log-to-file('#', $success);

            if (%job<mailto>) {
                use Broadcast::Email;
                mail-job-end(%job<mailto>, %job);
            }
        }

        when job-fail {
            log-to-file('#', "Build failed: {$message}");

            if (%job<mailto>) {
                use Broadcast::Email;
                mail-job-fail(%job<mailto>, %job);
            }
        }
    }
}

sub doCommand(IO::Path $workspace, Str $command, IO::Handle $logHandle) {
    log-to-file('$', $command.trim);

    indir($workspace, {
        my $proc = Proc::Async.new(«$command»);

        react {
            whenever $proc.stdout.lines {
                log-to-file('O', $_.trim);
            }

            whenever $proc.stderr {
                log-to-file('!', $_.trim);
            }

            whenever $proc.start {
                if (.exitcode !== 0) {
                    die "Command exited non-zero ({.exitcode})";
                }

                done;
            }
        }
    });
}

sub gitRecipe(IO::Path $workspace, %job) {
    my Str @commands;

    if ($workspace.add('.git').d) {
        @commands.push: "git fetch";
        @commands.push: "git reset --quiet --hard {%job<target>}";
    } else {
        @commands.push: "git clone --quiet --branch {%job<target>} {%job<repositoryUrl>} .";
    }

    @commands.push: "git checkout --quiet {%job<commit>}";
    @commands.push: %job<buildCommand>;

    if (%job<mode> ~~ "dryrun") {
        return ("echo $_" for @commands);
    }

    return @commands;
}

sub freestyleRecipe(IO::Path $workspace, %job) {
    my Str @commands;

    @commands.push: %job<buildCommand>;

    if (%job<mode> ~~ "dryrun") {
        return ("echo $_" for @commands);
    }

    return @commands;
}

multi sub MAIN(Bool :$version) {
    if ($version) {
        say SCRIPT_VERSION;
        exit;
    }

    my %config{Str} = Config::INI::parse_file(Str(CONFIG));

    my IO::Path @jobs = dir(%config<_><spool>, test => /'.' ini $/).sort: { .changed };

    unless (@jobs) {
        say 'No jobs found.';
        exit;
    }

    MAIN(@jobs.first);
}

multi sub MAIN(IO::Path $jobFile) {
    my %config{Str} = Config::INI::parse_file(Str(CONFIG));

    my %job{Str} = Config::INI::parse_file($jobFile.path);

    unless (%job<job>:exists) {
        try unlink($jobFile);
        say "Deleting {$jobFile} because it is malformed.";
        return;
    }

    %job = %job<job>;
    %job<path> = $jobFile.IO;
    %job<id> = $jobFile.IO.basename;

    my $fsFriendlyRepositoryName = %job<project>.lc;
    $fsFriendlyRepositoryName ~~ s:g/\W/-/;

    my $fsFriendlyTarget = %job<target>.lc;
    $fsFriendlyTarget ~~ s:global/\W/-/;

    my IO::Path $projectRoot = %config<_><buildRoot>.IO.add($fsFriendlyRepositoryName);

    my IO::Path $jobArchive = $projectRoot.add('JOBS');

    my IO::Path $logFile = $jobArchive.add(($jobFile.extension: 'log').basename);

    unless ($jobArchive.d) {
        mkdir($jobArchive);
    }

    $jobFile.move($logFile);
    %job<path> = $logFile.IO;

    my IO::Path $workspace = $projectRoot.add($fsFriendlyTarget);
    %job<workspace> = $workspace.IO;

    unless ($workspace.d) {
        mkdir($workspace);
    }

    %job<message> = decode-ini-value(%job<message>);

    $logHandle = $logFile.open(:a);
    $logHandle.say("pid = {$*PID}");
    $logHandle.say("\n\n[log]");

    broadcast(job-start, %job);

    my Str @buildRecipe;
    given %job<scm>.lc {
        when "git" { @buildRecipe = gitRecipe($workspace, %job) }
        when "freestyle" { @buildRecipe = freestyleRecipe($workspace, %job) }
    }

    if (%config<_><sshKey>:exists) {
        doCommand($workspace, "ssh-add {%config<_><sshKey>}");
    }

    for @buildRecipe {
        doCommand($workspace, $_, $logHandle);
    }

    broadcast(job-end, %job);

    CATCH {
        when X::AdHoc {
            broadcast(job-fail, %job, .payload);
        }

        default {
            broadcast(job-fail, %job, .Str);
        }
    }

    LEAVE {
        try close $logHandle;
    }
}
