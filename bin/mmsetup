#!/usr/bin/env rakudo

=begin pod

This is the setup script for mixmaster. It is responsible for creating:

=item The application configuration file in C<~/.config>

=item The build directory, defaulting to C<~/Builds>

=item The spool directory, defaulting to C</var/spool/mixmaster/USER>

=item A systemd user socket service in C<~/.config/systemd/user> that
      listens for build requests and converts them to job files in the
      spool directory.

=item A systemd user path service in C<~./config/systemd/user> that
      picks up job files from the spool directory and performs builds.

=end pod

our Str constant SCRIPT_VERSION = "2024.08.16";

use lib '/usr/local/share/mixmaster/lib';
use lib $*PROGRAM.absolute.IO.parent(2).add('lib');

use Systemd;
use Filesystem;
use Config;

multi MAIN(Bool :$man) {
    run $*EXECUTABLE, '--doc', $*PROGRAM;
}

multi MAIN(Bool :$version) {
    say SCRIPT_VERSION;
    exit;
}

multi sub MAIN(
    Str  :$buildRoot = "{$*HOME}/Builds", #= Filesystem path for storing builds.
    Str  :$spool = "/var/spool/mixmaster/{$*USER}", #= Filesystem path for storing jobs.
    Str  :$email = '',                    #= Email address to use for notifiations.
    Int  :$port = 8585,                   #= Port to use with bridge service.
    Str  :$key = '',                      #= SSH key to load at the start of each build.
    Bool :$dump,                          #= Display the configuration file.
    Bool :$force,                         #= Overwrite existing files.
    Bool :y(:$yes),                       #= Skip confirmation.
    Bool :$teardown                       #= Uninstall files but keep build root and spool directories.
) {
    my IO::Path $configPath = $*HOME.IO.add(".config/mixmaster.ini");
    my IO::Path $resolvedBuildRoot = $buildRoot.IO.resolve;
    my IO::Path $resolvedSpool = $spool.IO.resolve;
    my IO::Path $systemdRoot = IO::Path.new("{$*HOME}/.config/systemd/user");

    if ($teardown) {
        systemd-teardown($configPath, $resolvedBuildRoot, $resolvedSpool, $systemdRoot);
        exit;
    }

    if ($dump) {
        say("Dumping {$configPath}");
        say("-" x 72 ~ "\n");

        .say for $configPath.lines;
        exit;
    }

    my @tasks = ();

    # Build root
    if ($resolvedBuildRoot.d) {
        say "✓ Build root {$resolvedBuildRoot} exists.";
    } else {
        unless ($resolvedBuildRoot.parent.w) {
            die("✘ The parent of {$resolvedBuildRoot} is not writable.\n")
        }

        say("NEW: Builds will be stored in {$resolvedBuildRoot}");
        @tasks.push("buildRoot");
    }

    # Config
    if ($configPath.f and not $force) {
        say "✓ Configuration file {$configPath} exists.";
    } else {
        say("NEW: The configuration file will be written to {$configPath}");
        @tasks.push("configurationFile");
    }

    # Systemd
    if ($systemdRoot.add("mixmaster-bridge.socket").e and not $force) {
        say "✓ Systemd services exist under {$systemdRoot}.";
    } else {
        say("NEW: 4 systemd service files wil be written to {$systemdRoot}");
        say "NEW: The systemd socket service will use port {$port}";
        @tasks.push("systemdServices");
    }

    if (@tasks.first and not $yes) {
        my Str $confirmation = prompt("Proceed? [y/N] ");
        exit unless $confirmation.lc eq "y";
    }

    if (@tasks.first("buildRoot")) {
        create-build-root($resolvedBuildRoot);
    }

    if (@tasks.first("configurationFile")) {
        create-initial-config($configPath, $resolvedBuildRoot, $resolvedSpool, $email, $key);
    }

    if (@tasks.first("systemdServices")) {
        systemd-setup($systemdRoot, $resolvedBuildRoot, $port);
    }

    # Spool
    if not ($resolvedSpool.d) {
        say("❗ The spool directory must be created manually. For example:");
        say("   sudo mkdir -p {$resolvedSpool}");
        say("   sudo chown {$*USER} {$resolvedSpool}");
    } else {
        say "✓ The spool directory {$resolvedSpool} exists.";
    }

    CATCH {
        default {
            .payload.say
        }
    }
}

# Local Variables:
# mode: raku
# End:
